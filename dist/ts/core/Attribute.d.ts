import Constants from 'core/Constants';
export default class Attribute {
    static STATIC_DRAW: Constants.AttributeUsage;
    static DYNAMIC_DRA: Constants.AttributeUsage;
    static STREAM_DRAW: Constants.AttributeUsage;
    static BYTE: Constants.AttributeType;
    static UNSIGNED_BYTE: Constants.AttributeType;
    static SHORT: Constants.AttributeType;
    static UNSIGNED_SHORT: Constants.AttributeType;
    static FLOAT: Constants.AttributeType;
    static ARRAY_BUFFER: Constants.AttributeTarget;
    static ELEMENT_ARRAY_BUFFER: Constants.AttributeTarget;
    static POINTS: Constants.DrawType;
    static LINES: Constants.DrawType;
    static LINE_STRIP: Constants.DrawType;
    static LINE_LOOP: Constants.DrawType;
    static TRIANGLES: Constants.DrawType;
    static TRIANGLE_STRIP: Constants.DrawType;
    static TRIANGLE_FAN: Constants.DrawType;
    protected updated: boolean;
    protected dataSize: number;
    protected _buffer: Constants.TypedArray;
    protected _target: Constants.AttributeTarget;
    protected _bufferPointer: WebGLBuffer;
    protected _usage: Constants.AttributeUsage;
    protected _normalized: boolean;
    protected _stride: number;
    protected _offset: number;
    protected _type: Constants.AttributeType;
    constructor(target: Constants.AttributeTarget, buffer: Constants.TypedArray, type: Constants.AttributeType, dataSize: number);
    readonly needsUpdate: boolean;
    readonly buffer: WebGLBuffer;
    set(index: number, ...data: number[]): void;
    get(index: number): number[];
    replaceWith(buffer: Constants.TypedArray): void;
    update(loc: number): void;
}
